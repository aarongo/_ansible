---
# This is for install mongodb_cluster

# 1. 判断基础目录是否存在
- name: system base directory create
  file:
    dest: "{{ item }}"
    state: directory
    group: ecommerce
  with_items:
    # - "{{ BASE_HOME }}"
    - "{{ SCRIPT_PATH }}"
    - "{{ LOGPATH }}"
    - "{{ MONGODB_CONF_PATH }}"

# 2. 创建mongodb 所使用的目录
- name: Create mongodb datapath  for master
  file:
    dest: "{{ MASTER_DBPATH }}"
    state: directory
    group: ecommerce
  when: mongodb_role == "master"


- name:  Creste mongodb datapath  for slave
  file:
    dest: "{{ SLAVE_DBPATH }}"
    state: directory
    group: ecommerce
  when: mongodb_role == "slave"


- name: Creste mongodb datapath  for arbitr
  file:
    dest: "{{ ARBITR_DBPATH }}"
    state: directory
    group: ecommerce
  when: mongodb_role == "arbitr"


# 3. 安装 mongodb 3.2.0 for all roles
- name: unarchive mongodb to remote Server
  unarchive:
    src: "../../../source_files/mongodb-linux-x86_64-rhel70-3.2.0.tgz"
    # src: mongodb-linux-x86_64-3.0.8.tgz
    dest: "{{ BASE_HOME }}"
    group: ecommerce


- name: change unarchive after directory name
  shell: "cp -rp {{ BASE_HOME }}/mongodb-linux-x86_64-rhel70-3.2.0/* {{ MONGODB_HOME }}"

- name: remove unarchive directory
  shell: "rm -rf {{ BASE_HOME }}/mongodb-linux-x86_64-rhel70-3.2.0"


# 5. 传送配置文件分环境
- name: transfer config to master
  template:
    src: master.conf.j2
    dest: "{{ MONGODB_CONF_PATH }}/master.conf"
    group: ecommerce
  when: mongodb_role == "master"


- name: transfer config to slave
  template:
    src: slave.conf.j2
    dest: "{{ MONGODB_CONF_PATH }}/slave.conf"
    group: ecommerce
  when: mongodb_role == "slave"

- name: transfer config to arbitr
  template:
    src: arbitr.conf.j2
    dest: "{{ MONGODB_CONF_PATH }}/arbitr.conf"
    group: ecommerce
  when: mongodb_role == "arbitr"


# 6. 传送启动脚本
- name: transfer init script
  template:
    src: action_mongodb.py.j2
    dest: "{{ SCRIPT_PATH }}/action_mongodb.py"
    group: ecommerce
    mode: 0755


# 7. 启动 mongodb
- name: start  mongodb master
  shell: ./action_mongodb.py -C master -t restart
  args:
    chdir: "{{ SCRIPT_PATH }}"
  when: mongodb_role == "master"


- name: start mongodb slave
  shell: ./action_mongodb.py -C slave -t restart
  args:
    chdir: "{{ SCRIPT_PATH }}"
  when: mongodb_role == "slave"


- name: start mongodb arbitr
  shell: ./action_mongodb.py -C arbitr -t restart
  args:
    chdir: "{{ SCRIPT_PATH }}"
  when: mongodb_role == "arbitr"


# 配置日志切割
- name: After parse Transfer Files For cront mongodb cut logs
  template:
    src: logrotate.sh.j2
    dest: "{{SCRIPT_PATH}}/logrotate.sh"
    group: ecommerce
    mode: 0755
  

- name: Crontab Create For Nginx Logs Cutting At Every 00:00 system version  CentOS 7
  cron:
    name="Nginx Cut logs" minute="0" hour="0" job="{{SCRIPT_PATH}}/logrotate.sh"
  notify:
    - restart crond centos 7
  when: ansible_distribution == 'CentOS' and ansible_distribution_major_version == "7"


- name: Crontab Create For Nginx Logs Cutting At Every 00:00 system version  CentOS 6
  cron:
    name="Nginx Cut logs" minute="0" hour="0" job="{{SCRIPT_PATH}}/logrotate.sh"
  notify:
    - restart crond centos 6
  when: ansible_distribution == 'CentOS' and ansible_distribution_major_version == "6"
