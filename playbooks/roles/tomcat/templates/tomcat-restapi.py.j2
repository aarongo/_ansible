#!/usr/bin/env python
# _*_coding:utf-8_*_
# Author: "Edward.Liu"
# Author-Email: lonnyliu@126.com


# Import libary~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
import subprocess
import time
import sys
import signal
import os
import argparse
import requests
from requests.exceptions import ConnectionError
import shutil


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
class Tomcat(object):
    def __init__(self):
        self.tomcat_exe = "tomcat_" + "{{ project_name }}"
        self.Tomcat_Home = "/software/%s" % self.tomcat_exe
        self.Tomcat_Log_Home = "/software/%s/logs" % self.tomcat_exe
        self.tomcat_tmp = ["%s/temp/" % self.Tomcat_Home,
                           "%s/work/Catalina" % self.Tomcat_Home]
        self.counnt = 10
        self.url = "{{ TOMCAT_CHECK_URL }}"

    # Get Tomcat_PID~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    def get_tomcat_pid(self):
        # 自定义获取程序 pid 与启动命令
        p = subprocess.Popen(['ps', '-Ao', 'pid,command'],
                             stdout=subprocess.PIPE)
        out, err = p.communicate()
        for line in out.splitlines():
            if 'java' in line:
                if self.tomcat_exe in line:
                    pid = int(line.split(None, 1)[0])
                    return pid
                    # 获取 END

    # 清理临时目录文件
    def cleantmp(self):
        for dirpath in self.tomcat_tmp:
            if os.path.exists(dirpath):
                shutil.rmtree(dirpath)
        if not os.path.exists(self.tomcat_tmp[0]):
            os.makedirs(self.tomcat_tmp[0])

    # Start Tomcat Process~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    def start_tomcat(self):
        os.environ["JAVA_HOME"] = "{{ JAVA_HOME_7 }}"
        os.environ["JRE_HOME"] = "{{ JAVA_HOME_7 }}/jre"
        if self.get_tomcat_pid() is not None:
            print "#" * 40
            print "\033[32m %s Is Started \033[0m" % self.tomcat_exe
            print "#" * 40
        else:
            # Start Tomcat
            command_start_tomcat = "%s/bin/startup.sh" % self.Tomcat_Home
            p = subprocess.Popen(command_start_tomcat, stdin=subprocess.PIPE, stdout=subprocess.PIPE,
                                 stderr=subprocess.PIPE, shell=True)
            stdout, stderr = p.communicate()
            print stdout, stderr

    # Stop Tomcat process~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    def stop_tomcat(self):
        wait_sleep = 0
        if self.get_tomcat_pid() is None:
            print "\033[32m %s is Not Running\033[0m" % self.tomcat_exe
        else:
            command_stop_tomcat = "%s/bin/shutdown.sh" % self.Tomcat_Home
            p = subprocess.Popen(command_stop_tomcat, stdin=subprocess.PIPE, stdout=subprocess.PIPE,
                                 stderr=subprocess.PIPE, shell=True)
            stdout, stderr = p.communicate()
            while (self.get_tomcat_pid() is not None):
                print "waiting for processes to exit\n"
                wait_sleep += 1
                time.sleep(1)
                if wait_sleep == self.counnt:
                    os.kill(self.get_tomcat_pid(), signal.SIGKILL)
                    print "\033[32m Stop Tomcat is sucessful \033[0m"
                    break

    # View TomcatLogs~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    def tomcat_log(self):
        command_tomcat_log = "tail -f %s/catalina.out " % self.Tomcat_Log_Home
        p = subprocess.Popen(command_tomcat_log, shell=True,
                             stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        returncode = p.poll()
        try:
            while returncode is None:
                line = p.stdout.readline()
                returncode = p.poll()
                line = line.strip()
                print line
            print returncode
        except KeyboardInterrupt:
            print 'ctrl+d or z'

    def tomcat_status(self):
         headers = {'apiVersion': '2.0'}
        status_code = ""
        sleep_number = 0
        try:
            while sleep_number <= 10:
                try:
                    r = requests.get(self.url, headers=headers)
                    status_code = r.status_code
                except ConnectionError as e:
                    pass
                sleep_number += 1
                time.sleep(1)
                if status_code == 201:
                    status_code = "200 OK"
                    break
        except KeyboardInterrupt:
            print "退出"
        print status_code

    def check_arg(self, args=None):
        parser = argparse.ArgumentParser(
            description="EG: '%(prog)s'  -d start|stop|restart|status|log")
        # ADD Tomcat Apps ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        parser.add_argument('-d', '--handle', default='log',
                            help='Input One of the {start|stop|status|restart|log}')  # nargs='?' 有一个货没有参数都可以
        parser.add_argument('-v', '--version',
                            action='version', version='%(prog)s 1.0')

        if len(sys.argv) <= 2:
            parser.print_help()
            sys.exit(1)
        return parser.parse_args(args)


if __name__ == '__main__':
    args = Tomcat().check_arg(sys.argv[1:])
    Handle = Tomcat()
    try:
        if args.handle == 'log':
            Handle.tomcat_log()
        elif args.handle == 'start':
            Handle.start_tomcat()
        elif args.handle == 'stop':
            Handle.stop_tomcat()
            Handle.cleantmp()
        elif args.handle == 'restart':
            Handle.stop_tomcat()
            Handle.cleantmp()
            time.sleep(5)
            Handle.start_tomcat()
        elif args.handle == 'status':
            Handle.tomcat_status()
    except TypeError:
        args.print_help()
