---
# tasks file for deploy
# Install pip for remote server

- name: Judge Script directory ==>判断远端脚本存放路径
  file: dest={{script_home}} mode=0755 state=directory
  tags: check script directory


- name: Judge extracted_directory =>判断临时目录 {{tmp_save_directory}}
  file: dest={{tmp_save_directory}} mode=755 state=directory
  tags: check extracted_directory


- name: Judge extracted_directory =>判断解压目录 {{extracted_directory}}
  file: dest={{extracted_directory}} mode=755 state=directory
  tags: check extracted_directory


- name: Trans j2 Script To Remote  ==>传送脚本到远端服务器
  template: src=deploy_project.py.j2 dest={{script_home}}tomcat_handle mode=0755


- name: extracted *. war To Remote directory ==> 解压 {{deploy_file_name}}到 {{extracted_directory}}
  unarchive: src={{deploy_file_name}} dest={{extracted_directory}}
  tags: unarchive war files


- name: Create Static directory To project directory  ==>创建 {{env}} 静态软连接
  file: src={{static_directory}} dest={{static_link_directory}} state=link
  tags: create static link
  when: (env == "front") or (env == "mobile")


- name: Create Picture Directory To Project Directory ==>创建 {{env}} 图片软连接
  file: src={{picture_directory}} dest={{picture_link_directory}} state=link
  when: (env == "front") or (env == "backend") or (env == "mobile")
  tags: crate picture link


- name: Deploy project For Tomcat-front ==> 创建 front 部署软连接
  file: src={{extracted_directory}} dest="{{deploy_link_project_front}}" state=link
  when: env == "front"
  tags: create project link to Tomcat-front


- name: Deploy project For Tomcat-backend ==> 创建 backend 部署软连接
  file: src={{extracted_directory}} dest="{{deploy_link_project_backend}}" state=link
  when: env == "backend"
  tags: create project link to Tomcat-backend


- name: Deploy project For Tomcat-mobile ==> 创建 mobile 部署软连接
  file: src={{extracted_directory}} dest="{{deploy_link_project_mobile}}" state=link
  when: env == "mobile"
  tags: create project link to Tomcat-mobile


- name: Restart Tomcat {{env}}
  shell: chdir={{script_home}} nohup ./tomcat_handle restart {{env}} &


- name: Check Url Retries 12 delay 5 changed_when=false ==> 重启 Tomcat {{env}} 重试12次,每次等5秒 状态失败检测
  shell: curl --write-out %{http_code} --silent --output /dev/null {{check_url}} warn=no
  register: return_code
  until: return_code.stdout.find("200") != -1
  retries: 12
  delay: 5
  changed_when: false
- debug: msg="{{ return_code.stdout }}"
